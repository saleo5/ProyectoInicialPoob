import java.util.*;

public class MaxwellContainer {
    private static Canvas canvas;
    private TreeMap<Integer, Deamon> demons;
    private ArrayList<Particle> particles;
    private ArrayList<Rectangle> tablero;
    private int Height;
    private int Width;
    private int blueParticles;
    private int redParticles;
    private boolean isVisible;
    private boolean isOk;

    private MaxwellContainer(int h, int w) {
        if ((2 <= h && h <= 2000) && (2 <= w && w <= 2000)) {
            this.isOk = true;
            this.Height = h;
            this.Width = w;
            CrearCanvas(w, h);
            CrearTablero(w, h);
        } else {
            this.isOk = false;
        }
    }

    public MaxwellContainer(int h, int w, int d, int b, int r, int[][] particlesData) {
        this(h, (w * 2));
        if (isOk) {
            this.demons = new TreeMap<>();
            this.particles = new ArrayList<>();
            this.blueParticles = b;
            this.redParticles = r;
            addParticlesForMatriz(particlesData);
            addDeamon(d);
            this.makeVisible();
        }
    }

    private void CrearCanvas(int width, int height) {
        canvas = new Canvas(width, height);
        canvas.getCanvas(width, height);
    }

    private void CrearTablero(int w, int h) {
        Rectangle fondo = new Rectangle(0, 0, h, w, "yellow");
        Rectangle interior = new Rectangle(5, 5, h - 10, w - 10, "white");

        int muroX = (w / 2) - 2;
        int huecoAltura = 40;
        int huecoCentro = h / 2;

        Rectangle muroSuperior = new Rectangle(muroX, 0, huecoCentro - (huecoAltura / 2), 4, "green");
        Rectangle muroInferior = new Rectangle(muroX, huecoCentro + (huecoAltura / 2), h - (huecoCentro + (huecoAltura / 2)), 4, "green");

        this.tablero = new ArrayList<>();
        tablero.add(fondo);
        tablero.add(interior);
        tablero.add(muroSuperior);
        tablero.add(muroInferior);
    }

    public void makeVisible() {
        for (Rectangle r : this.tablero) r.makeVisible();
        for (Deamon d : this.demons.values()) d.makeVisible();
        for (Particle p : this.particles) p.makeVisible();
    }

    public void addDeamon(int d) {
        if (!demons.containsKey(d)) {
            Deamon deamon = new Deamon((this.Width / 2) - 10, d - 10, 20);
            deamon.makeVisible();
            demons.put(d, deamon);
        }
    }

    public void addParticlesForMatriz(int[][] particlesData) {
        for (int i = 0; i < (blueParticles + redParticles); i++) {
            boolean isRed = i < redParticles;
            String color = isRed ? "red" : "blue";
            addParticle(color, isRed, particlesData[i][0], particlesData[i][1], particlesData[i][2], particlesData[i][3]);
        }
    }

    public void addParticle(String color, boolean isRed, int x, int y, int vx, int vy) {
        Particle particle = new Particle(color, isRed, x, y, vx, vy);
        this.particles.add(particle);
    }

    public void start(int ticks) {
        for (int i = 0; i < ticks; i++) {
            for (Particle p : this.particles) {
                p.move(1);

                //   un demonio cercano (Â±10 en  Y)
                for (Map.Entry<Integer, Deamon> entry : demons.entrySet()) {
                    int dy = Math.abs(entry.getKey() - p.getY());
                    if (dy <= 10) {
                        p.interactWithDeamon(entry.getValue());
                        break;
                    }
                }
            }

            try {
                Thread.sleep(20);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
}
