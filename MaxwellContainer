import java.util.*;

class MaxwellContainer {
    private int width, height;
    private List<Demon> demons;
    private List<Particle> particles;
    private List<Hole> holes;
    private boolean isVisible;

    public MaxwellContainer(int w, int h) {
        this.width = w;
        this.height = h;
        this.demons = new ArrayList<>();
        this.particles = new ArrayList<>();
        this.holes = new ArrayList<>();
        this.isVisible = true;
    }

    public MaxwellContainer(int h, int w, int d, int r, int b, int[][] particlesData) {
    this.width = w;
    this.height = h;
    this.demons = new ArrayList<>();
    this.particles = new ArrayList<>();
    this.holes = new ArrayList<>();
    this.isVisible = true;

    for (int i = 0; i < particlesData.length; i++) {
        int px = particlesData[i][0];  
        int py = particlesData[i][1];  
        int vx = particlesData[i][2];  
        int vy = particlesData[i][3];  
        boolean isRed = (i < r); 
        addParticle(isRed ? "red" : "blue", isRed, px, py, vx, vy);
    }
    

    public void addDemon(int x, int y) {
        demons.add(new Demon(x, y));
    }

    public void delDemon(int d) {
        demons.removeIf(demon -> demon.getPosition() == d);
    }

    public void addParticle(String color, int px, int py, int vx, int vy) {
        particles.add(new Particle(color, px, py, vx, vy));
    }

    public void delParticle(String color) {
        particles.removeIf(p -> p.getColor().equals(color));
    }

    public void addHole(int px, int py, int capacity) {
        holes.add(new Hole(px, py, capacity));
    }

    public void start(int ticks) {
        for (int i = 0; i < ticks; i++) {
            moveParticles();
        }
    }

    private void moveParticles() {
        for (Particle p : particles) {
            p.move();
            checkCollisions(p);
        }
    }

    private void checkCollisions(Particle p) {
        for (Hole h : holes) {
            if (h.absorb(p)) {
                particles.remove(p);
                break;
            }
        }
    }

    public boolean isGoal() {
        return particles.stream().allMatch(p -> (p.getColor().equals("red") && p.getPx() < width / 2) || 
                                              (p.getColor().equals("blue") && p.getPx() > width / 2));
    }

    public void makeVisible() {
        isVisible = true;
    }

    public void makeInvisible() {
        isVisible = false;
    }

    public boolean ok(){
        return true;
    }
    
    public void finish() {
        System.out.println("Simulation finished.");
    }
    
    
    
}
