import java.util.*;
import javax.swing.JOptionPane;

public class MaxwellContainer {
    private static Canvas canvas;
    private TreeMap<Integer, Deamon> demons;
    private ArrayList<Hole> holes;
    private ArrayList<Particle> particles;
    private ArrayList<Rectangle> board;
    private int height;
    private int width;
    private int blueParticles;
    private int redParticles;
    private boolean isVisible;
    private boolean isOk;

    /**
     * Constructor privado que valida y crea el tablero y canvas.
     */
    private MaxwellContainer(int h, int w){
        if ((2 <= h && h <= 2000) && (2 <= w && w <= 2000)){
            this.isOk = true;
            this.height = h;
            this.width = w;
            createCanvas(w, h);
            createBoard(w, h);
        } else {
            this.isOk = false;
            checkIsOk();
        }
    }

    /**
     * Constructor público con datos de partículas, demonios, etc.
     */
    public MaxwellContainer(int h, int w, int d, int b, int r, int[][] particlesData){
        this(h, (w * 2));
        if (isOk) {
            this.demons = new TreeMap<>();
            this.holes = new ArrayList<>();
            this.particles = new ArrayList<>();
            this.blueParticles = b;
            this.redParticles = r;
            addParticlesFromMatrix(particlesData);
            sendDimensions();
            addDeamon(d);
            this.makeVisible();
        }
    }

    // Verifica si el objeto se creó correctamente
    private boolean checkIsOk(){
        return isOk;
    }

    // Envía dimensiones a las partículas
    private void sendDimensions(){
        if (!this.particles.isEmpty()){
            this.particles.get(0).setDimensions(this.width, this.height);
        }
    }

    // Crea el canvas gráfico
    private void createCanvas(int width, int height){
        canvas = new Canvas(width, height);
        canvas.getCanvas(width, height);
    }

    // Crea el tablero visual
    private void createBoard(int w, int h){
        Rectangle border = new Rectangle(0, 0, h, w, "orange");
        Rectangle background = new Rectangle(5, 5, h - 10, w - 10, "white");
        Rectangle middle = new Rectangle((w / 2) - 2, 0, h, 4, "green");
        this.board = new ArrayList<>();
        board.add(border);
        board.add(background);
        board.add(middle);
    }

    // Muestra todos los elementos visuales
    public void makeVisible(){
        for (Rectangle r : this.board) r.makeVisible();
        if (this.demons.size() != 0){
            for (Deamon d : this.demons.values()) d.makeVisible();
        }
        for (Particle p : this.particles) p.makeVisible();
        for (Hole h : this.holes) h.makeVisible();
    }

    // Oculta todos los elementos visuales
    public void makeInvisible(){
        for (Rectangle r : this.board) r.makeInvisible();
        if (this.demons.size() != 0){
            for (Deamon d : this.demons.values()) d.makeInvisible();
        }
        for (Particle p : this.particles) p.makeInvisible();
        for (Hole h : this.holes) h.makeInvisible();
    }

    // Verifica si ya hay un demonio en una posición
    private boolean hasDeamonAt(int d){
        return this.demons.containsKey(d);
    }

    // Verifica si hay colisión con otro demonio cerca
    private boolean isDeamonCollision(int d){
        for (int i = (d - 10); i <= (d + 10); i++){
            if (hasDeamonAt(i)) return true;
        }
        return false;
    }

    // Agrega un demonio al centro del contenedor
    public void addDeamon(int d) {
        if (!hasDeamonAt(d)) {
            Deamon deamon = new Deamon((this.width / 2) - 10, d - 10, 20);
            deamon.makeVisible();
            demons.put(d, deamon);
            if (!this.particles.isEmpty()) {
                this.particles.get(0).addDemon(this.width / 2, d);
            }
        } else {
            System.out.println("Hay un demonio en este lugar");
        }
    }

    // Elimina un demonio si existe
    public void deleteDeamon(int d) {
        if (hasDeamonAt(d)){
            this.demons.get(d).erase();
            this.demons.remove(d);
            if (!this.particles.isEmpty()) {
                this.particles.get(0).deleteDemon(this.width / 2, d);
            }
        } else {
            System.out.println("El demonio no existe");
        }
    }

    // Agrega todas las partículas a partir de una matriz de datos
    public void addParticlesFromMatrix(int[][] particlesData){
        for (int i = 0; i < (blueParticles + redParticles); i++) {
            if (i < redParticles) {
                addParticle("red", true, particlesData[i][0], particlesData[i][1], particlesData[i][2], particlesData[i][3]);
            } else {
                addParticle("blue", false, particlesData[i][0], particlesData[i][1], particlesData[i][2], particlesData[i][3]);
            }
        }
    }

    // Agrega una partícula individual
    public void addParticle(String color, boolean isRed, int x, int y, int vx, int vy){
        Particle particle = new Particle(color, isRed, x, y, vx, vy);
        this.particles.add(particle);
    }

    // Elimina partículas por color
    public void deleteParticlesByColor(String color){
        for (Particle p : this.particles) p.erase();
        this.particles.removeIf(p -> p.getColor().equals(color));
        for (Particle p : this.particles) p.draw();
    }

    // Inicia el movimiento de partículas por una cantidad de ticks
    public void start(int ticks) {
        for (int i = 0; i < ticks; i++) {
            for (Particle p : this.particles) {
                p.move(1);
                checkGoal();
            }
        }
    }

    // Devuelve una lista con las escalas de los demonios
    public ArrayList<Integer> getDemonScales(){
        ArrayList<Integer> scales = new ArrayList<>();
        for (Deamon d : this.demons.values()) {
            scales.add(d.getEscala());
        }
        return scales;
    }

    // Muestra mensaje si se cumple la condición de victoria
    public void checkGoal(){
        if (isGoalReached()) {
            JOptionPane.showMessageDialog(null, "Juego terminado");
        }
    }

    // Verifica si todas las partículas están en la posición correcta
    public boolean isGoalReached(){
        for (Particle p : particles) {
            if (!p.posicionCorrecta()) {
                return false;
            }
        }
        return true;
    }

    // Devuelve los datos de todas las partículas
    public int[][] getParticlesData(){
        int[][] dataParticles = new int[particles.size()][4];
        for (int i = 0; i < particles.size(); i++) {
            int[] data = particles.get(i).getParticleData();
            dataParticles[i] = data;
        }
        return dataParticles;
    }

    // Devuelve los índices donde hay demonios
    public int[] getDemonsPositions(){
        int[] dataDemons = demons.keySet().stream().mapToInt(Integer::intValue).toArray();
        Arrays.sort(dataDemons);
        return dataDemons;
    }

    // Agrega un agujero si tiene capacidad positiva
    public void addHole(int x, int y, int capacity){
        if (capacity > 0) {
            Hole h = new Hole(x, y, capacity);
            this.holes.add(h);
            if (!this.particles.isEmpty()) {
                this.particles.get(0).addhole(h);
            }
            isOk = true;
            checkIsOk();
        } else {
            isOk = false;
            checkIsOk();
        }
    }

    // Devuelve los datos de los agujeros
    public int[][] getHolesData(){
        int[][] dataHoles = new int[holes.size()][3];
        for (int i = 0; i < holes.size(); i++) {
            int[] data = holes.get(i).dataHole();
            dataHoles[i] = data;
        }
        return dataHoles;
    }
}
