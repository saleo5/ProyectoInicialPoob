import java.util.*;
import javax.swing.JOptionPane;

/**
 * Representa el contenedor donde interactúan las partículas, demonios y agujeros.
 */
public class MaxwellContainer {
    private static Canvas canvas;
    private TreeMap<Integer, Deamon> demons;
    private ArrayList<Hole> holes;
    private ArrayList<Particle> particles;
    private ArrayList<Rectangle> tablero;
    private int Height;
    private int Width;
    private int blueParticles;
    private int redParticles;
    private boolean isVisible;
    private boolean isOk;

    /**
     * Constructor privado del contenedor con dimensiones verificadas.
     */
    private MaxwellContainer(int h, int w) {
        if ((2 <= h && h <= 2000) && (2 <= w && w <= 2000)) {
            this.isOk = true;
            this.Height = h;
            this.Width = w;
            CrearCanvas(w, h);
            CrearTablero(w, h);
        } else {
            this.isOk = false;
        }
    }

    /**
     * Constructor del contenedor con demonios, partículas y tamaño definido.
     */
    public MaxwellContainer(int h, int w, int d, int b, int r, int[][] particlesData) {
        this(h, (w * 2));
        if (isOk) {
            this.demons = new TreeMap<>();
            this.holes = new ArrayList<>();
            this.particles = new ArrayList<>();
            this.blueParticles = b;
            this.redParticles = r;
            addParticlesForMatriz(particlesData);
            addDeamon(d);
            this.makeVisible();
        }
    }

    /**
     * Verifica si el contenedor es válido.
     */
    private boolean ok() {
        return isOk;
    }

    /**
     * Inicializa el canvas donde se mostrarán los elementos.
     */
    private void CrearCanvas(int width, int height) {
        canvas = new Canvas(width, height);
        canvas.getCanvas(width, height);
    }

    /**
     * Crea la estructura visual del tablero.
     */
    private void CrearTablero(int w, int h) {
        Rectangle straight1 = new Rectangle(0, 0, h, w, "yellow");
        Rectangle straight2 = new Rectangle(5, 5, (h - 10), (w - 10), "white");
        Rectangle straight3 = new Rectangle(((w / 2) - 2), 0, h, 4, "green");

        this.tablero = new ArrayList<>();
        tablero.add(straight1);
        tablero.add(straight2);
        tablero.add(straight3);
    }

    /**
     * Muestra los elementos en pantalla.
     */
    public void makeVisible() {
        for (Rectangle r : this.tablero) r.makeVisible();
        for (Deamon d : this.demons.values()) d.makeVisible();
        for (Particle p : this.particles) p.makeVisible();
        for (Hole h : this.holes) h.makeVisible();
    }

    /**
     * Agrega un demonio en la posición indicada.
     */
    public void addDeamon(int d) {
        if (!demons.containsKey(d)) {
            Deamon deamon = new Deamon((this.Width / 2) - 10, d - 10, 20);
            deamon.makeVisible();
            demons.put(d, deamon);
        }
    }

    /**
     * Agrega partículas al contenedor desde una matriz de datos.
     */
    public void addParticlesForMatriz(int[][] particlesData) {
        for (int i = 0; i < (blueParticles + redParticles); i++) {
            boolean isRed = i < redParticles;
            String color = isRed ? "red" : "blue";
            addParticle(color, isRed, particlesData[i][0], particlesData[i][1], particlesData[i][2], particlesData[i][3]);
        }
    }

    /**
     * Agrega una partícula individual al contenedor.
     */
    public void addParticle(String color, boolean isRed, int x, int y, int vx, int vy) {
        Particle particle = new Particle(color, isRed, x, y, vx, vy);
        this.particles.add(particle);
    }

    /**
     * Inicia la simulación.
     */
    public void start(int ticks) {
        for (int i = 0; i < ticks; i++) {
            for (Particle p : this.particles) p.move(1);
        }
    }
}
